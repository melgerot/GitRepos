// This file has been autogenerated from parsing an Objective-C header file added in Xcode.

using System;
using System.Linq;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using SAP.CRM.Core.BL;
using System.Collections.Generic;
using SAP.CRM.Core.BL.Contracts;
using SAP.CRM.Core.BL.Managers;

namespace SAP.CRM.MT
{
	public partial class CustomersTableViewController : UITableViewController
	{
		private List<IBusinessEntity> customerData;

		LoadingOverlay loadingOverlay;

		public CustomersTableViewController (IntPtr handle) : base (handle)
		{
		}

		public override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear(animated);

			customerData = CustomerManager.GetCustomerData ();
			TableView.Source = new CustomersTableViewSource(customerData);
			this.TableView.ReloadData();
			   
		}
	}


	public class CustomersTableViewSource : UITableViewSource
	{
		#region -= class variables =-

		// declare vars
		protected List<IBusinessEntity> customerItems;
		private string cellIdentifier1 = "customerCell";
		private string cellIdentifier2 = "customerContactCell";

		#endregion


		#region -= constructors =-

		protected CustomersTableViewSource() { }

		public CustomersTableViewSource(List<IBusinessEntity> items)
		{
			customerItems = items;
		}

		#endregion

		#region -= data binding/display methods =-

		/// <summary>
		/// Called by the TableView to determine how many sections(groups) there are.
		/// </summary>
		public override int NumberOfSections(UITableView tableView)
		{
			return 1;
		}

		/// <summary>
		/// Called by the TableView to determine how many cells to create for that particular section.
		/// </summary>
		public override int RowsInSection(UITableView tableview, int section)
		{
			return customerItems.Count;
		}

		/// <summary>
		/// Called by the TableView to retrieve the header text for the particular section(group)
		/// </summary>
		//public override string TitleForHeader(UITableView tableView, int section)
		//{
		//    return tableItems[section].Name;
		//}

		/// <summary>
		/// Called by the TableView to retrieve the footer text for the particular section(group)
		/// </summary>
		//public override string TitleForFooter(UITableView tableView, int section)
		//{
		//    return tableItems[section].Footer;
		//}

		public override float GetHeightForRow (UITableView tableView, NSIndexPath indexPath)
		{
			return 44;
		}

		#endregion


		#region -= user interaction methods =-

		//public override void RowSelected(UITableView tableView, NSIndexPath indexPath)
		//{
		//    new UIAlertView("Row Selected", activityItems[indexPath.Section].Items[indexPath.Row].Heading, null, "OK", null).Show();
		//}

		//public override void RowDeselected(UITableView tableView, NSIndexPath indexPath)
		//{
		//    Console.WriteLine("Row " + indexPath.Row.ToString() + " deselected");
		//}

		//public override void AccessoryButtonTapped(UITableView tableView, NSIndexPath indexPath)
		//{
		//    Console.WriteLine("Accessory for Section, " + indexPath.Section.ToString() + " and Row, " + indexPath.Row.ToString() + " tapped");
		//}

		#endregion


		/// <summary>
		/// Called by the TableView to get the actual UITableViewCell to render for the particular section and row
		/// </summary>

		public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
		{
			UITableViewCell cell = null;
			if (customerItems [indexPath.Row].GetType ().Name == "Customer") 
			{
				// in a Storyboard, Dequeue will ALWAYS return a cell, 
				cell = tableView.DequeueReusableCell (cellIdentifier1);
    			// Set the properties
				cell.TextLabel.Text = ((Customer)customerItems [indexPath.Row]).NameField;

			} else 
			{
				// in a Storyboard, Dequeue will ALWAYS return a cell, 
				cell = tableView.DequeueReusableCell (cellIdentifier2);
				// Set the properties
				Customer customer = customerItems.OfType<Customer> ()
					.Where(c => c.CustomerField == ((CustomerContact)customerItems [indexPath.Row]).CustomerField).FirstOrDefault ();
				if (customer != null)
					cell.TextLabel.Text = customer.NameField;
				else
					cell.TextLabel.Text = "Customer data not present";

				cell.DetailTextLabel.Text = string.Format ("{0} {1} {2}",
				                                          ((CustomerContact)customerItems [indexPath.Row]).TitlePField,
				                                          ((CustomerContact)customerItems [indexPath.Row]).FirstnameField,
				                                          ((CustomerContact)customerItems [indexPath.Row]).LastnameField);
			}
			return cell;
		}
	}
}
