// This file has been autogenerated from parsing an Objective-C header file added in Xcode.

using System;
using System.Linq;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using SAP.CRM.Core.BL;
using System.Collections.Generic;
using SAP.CRM.Core.BL.Managers;

namespace SAP.CRM.MT
{
	public partial class AddCustomersTableViewController : UITableViewController
	{
		LoadingOverlay loadingOverlay;
		private List<Customer> customers;
		private List<Customer> customersFiltered;

		public AddCustomersTableViewController (IntPtr handle) : base (handle)
		{
			customers = new List<Customer> ();
			customersFiltered = new List<Customer> ();
		}

		public	override void ViewDidLoad()
		{
			base.ViewDidLoad ();

			// Wire event for search bar button to trigger search for selected scope
			searchBar.SelectedScopeButtonIndexChanged += (sender, e) => {
				customersFiltered.Clear();
				customers.Clear();
				CustomerManager.ClearCache();
				TableView.ReloadData();
			};
		
			// Wire event for search bar text change to trigger on data input
			searchBar.TextChanged += (sender, e) => {
				Filter();
			};

			// Wire
			searchBar.SearchButtonClicked += (sender, e) => {
				Search ();
			};
		}

		public override void ViewWillAppear(bool animated)
		{
			base.ViewWillAppear(animated);

			// Set and refresh table source
			TableView.Source = new AddCustomersTableViewSource(customersFiltered);
			this.TableView.ReloadData();
		}

		void Search()
		{
			if (!CustomerManager.IsUpdating)
			{
				// If max records are returned and first or last record is still in filtered list and 
				// search against backend
				if(customers.Count == 0 || customers.Count == 100 && 
				   (customersFiltered.Contains(customers[0]) || customersFiltered.Contains(customers[customers.Count - 1])))
				{
					if(searchBar.SelectedScopeButtonIndex == 0 || 
					   searchBar.SelectedScopeButtonIndex == 1 && searchBar.Text.Length > 2)
					{
						bool myCustomers = false;
						if (searchBar.SelectedScopeButtonIndex == 0)
							myCustomers = true;
						// Wire async update event
						CustomerManager.UpdateFinished += HandleUpdateFinished;
						// Get data from remote system
						CustomerManager.GetRemoteCustomerData (null, myCustomers, searchBar.Text.Trim ());
						loadingOverlay = new LoadingOverlay (UIScreen.MainScreen.Bounds);
						TableView.Add (loadingOverlay);
					}
				}
			}
			else
			{
				Filter ();
			}
		}

		void HandleUpdateFinished (object sender, UpdateEventArgs e)
		{
			if(e.Error != null)
			{
				// Error occured prompt for this
				this.InvokeOnMainThread (() => {
					loadingOverlay.Hide ();
				});
			}
			else
			{
				this.InvokeOnMainThread (() => {
					customers = CustomerManager.GetCustomerDataFromCache ();
					Filter ();
					loadingOverlay.Hide ();
				});
			}
		}

		void Filter()
		{
			customersFiltered = customers.Where (c => c.NameField.ToUpper().StartsWith(searchBar.Text.ToUpper())).ToList();
			TableView.ReloadData ();
		}
	}

	public class AddCustomersTableViewSource : UITableViewSource
	{
		#region -= class variables =-

		// declare vars
		protected List<Customer> customerItems;
		private string cellIdentifier1 = "activeCustomerCell";
		private string cellIdentifier2 = "inactiveCustomerCell";

		#endregion


		#region -= constructors =-

		protected AddCustomersTableViewSource() { }

		public AddCustomersTableViewSource(List<Customer> items)
		{
			customerItems = items;
		}

		#endregion

		#region -= data binding/display methods =-

		/// <summary>
		/// Called by the TableView to determine how many sections(groups) there are.
		/// </summary>
		public override int NumberOfSections(UITableView tableView)
		{
			return 1;
		}

		/// <summary>
		/// Called by the TableView to determine how many cells to create for that particular section.
		/// </summary>
		public override int RowsInSection(UITableView tableview, int section)
		{
			return customerItems.Count;
		}

		/// <summary>
		/// Called by the TableView to retrieve the header text for the particular section(group)
		/// </summary>
		//public override string TitleForHeader(UITableView tableView, int section)
		//{
		//    return tableItems[section].Name;
		//}

		/// <summary>
		/// Called by the TableView to retrieve the footer text for the particular section(group)
		/// </summary>
		//public override string TitleForFooter(UITableView tableView, int section)
		//{
		//    return tableItems[section].Footer;
		//}

		public override float GetHeightForRow (UITableView tableView, NSIndexPath indexPath)
		{
			return 44;
		}

		#endregion


		#region -= user interaction methods =-

		//public override void RowSelected(UITableView tableView, NSIndexPath indexPath)
		//{
		//    new UIAlertView("Row Selected", activityItems[indexPath.Section].Items[indexPath.Row].Heading, null, "OK", null).Show();
		//}

		//public override void RowDeselected(UITableView tableView, NSIndexPath indexPath)
		//{
		//    Console.WriteLine("Row " + indexPath.Row.ToString() + " deselected");
		//}

		//public override void AccessoryButtonTapped(UITableView tableView, NSIndexPath indexPath)
		//{
		//    Console.WriteLine("Accessory for Section, " + indexPath.Section.ToString() + " and Row, " + indexPath.Row.ToString() + " tapped");
		//}

		#endregion


		/// <summary>
		/// Called by the TableView to get the actual UITableViewCell to render for the particular section and row
		/// </summary>

		public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
		{
			UITableViewCell cell = null;
			if (customerItems [indexPath.Row].ID == 0) 
			{
				// in a Storyboard, Dequeue will ALWAYS return a cell, 
				cell = tableView.DequeueReusableCell (cellIdentifier1);
				// Set the properties
				cell.TextLabel.Text = customerItems [indexPath.Row].NameField;
				cell.Accessory = UITableViewCellAccessory.None;
			} else 
			{
				// in a Storyboard, Dequeue will ALWAYS return a cell, 
				cell = tableView.DequeueReusableCell (cellIdentifier2);
				// Set the properties
				cell.TextLabel.Text = customerItems [indexPath.Row].NameField;
				cell.Accessory = UITableViewCellAccessory.Checkmark;
			}
			return cell;
		}
	}
}
